x <- seq(1,10)
y <- x ** 2
plot(x, y)
setwd("~/Projects/football_scores/exploratory code")
measures <- read.csv("../data/processed/complete_measures.csv", stringsAsFactors = FALSE)
scores.map <- c("A"=-1, "D"=0, "H"=1)
measures$scores <- scores.map[measures$scores]
prop.table(table(measures$home_team_win_percent_last_5, measures$scores), margin = 1)
library(dplyr)
?filter
select(measures, scores, home_team_win_percent_last_5) %>% cor()
select(measures, scores, home_team_win_percent_last_5) %>% na.omit() %>% cor()
select(measures, scores, home_team_win_percent_last_5) %>% na.omit() %>% scale() %>% cor()
h + geom_histogram()
h <- ggplot(data = measures[, c(7:17)])
h + geom_histogram()
library(ggplot2)
h <- ggplot(data = measures[, c(7:17)])
h + geom_histogram()
library(reshape2)
melt_df <- melt(measures[, c(7:17)])
h <- ggplot(data = melt_df, aes(x=value))
h + geom_histogram()
h + geom_histogram() + facet(variable)
h + geom_histogram() + facet(variable ~ .)
h <- ggplot(data = melt_df, aes(x=value))
h + geom_histogram() + facet(variable ~ .)
h + geom_histogram() + facet_wrap(~variable)
melt_df <- melt(measures[, c(17:27)])
h <- ggplot(data = melt_df, aes(x=value))
h + geom_histogram() + facet_wrap(~variable)
h + geom_histogram() + facet_wrap(~variable, scales = free)
h + geom_histogram() + facet_wrap(~variable, scales = "free")
melt_df <- melt(measures[, c(7:17)])
h <- ggplot(data = melt_df, aes(x=value))
h + geom_histogram() + facet_wrap(~variable, scales = "free")
melt_df <- melt(measures[, c(27:37)])
h <- ggplot(data = melt_df, aes(x=value))
h + geom_histogram() + facet_wrap(~variable, scales = "free")
melt_df <- melt(measures[, c(37:47)])
h <- ggplot(data = melt_df, aes(x=value))
h + geom_histogram() + facet_wrap(~variable, scales = "free")
melt_df <- melt(measures[, c(27:37)])
h <- ggplot(data = melt_df, aes(x=value))
h + geom_histogram() + facet_wrap(~variable, scales = "free")
i <- ggplot(data = measures, aes(x=home_team_goals_conceded_last_10))
i + geom_histogram()
i + geom_histogram(binwidth=1)
i + geom_histogram(binwidth=5)
i + geom_histogram(binwidth=1)
i + geom_histogram(binwidth=2)
i + geom_histogram(binwidth=3)
i + geom_histogram()
install.packages("RandomForest")
install.packages("randomForest")
library(randomForest)
library(randomForest)
measures <- read.csv("../data/processed/complete_measures.csv", stringsAsFactors = FALSE)
scores.map <- c("A"=-1, "D"=0, "H"=1)
measures$scores <- scores.map[measures$scores]
measures <- measures[, -c(1,6)]
measures <- read.csv("../data/processed/complete_measures.csv", stringsAsFactors = FALSE)
scores.map <- c("A"=-1, "D"=0, "H"=1)
measures$scores <- scores.map[measures$scores]
measures <- measures[, -c(1:6)]
smp_size <- floor(0.75 * nrow(measures))
set.seed(123)
train_ind <- sample(seq_len(nrow(measures)), size = smp_size)
train <- measures[train_ind, ]
test <- measures[-train_ind, ]
rf.fit <- randomForest(scores ~ ., data = train)
measures <- read.csv("../data/processed/complete_measures.csv", stringsAsFactors = FALSE)
scores.map <- c("A"=-1, "D"=0, "H"=1)
measures$scores <- scores.map[measures$scores]
measures <- measures[, -c(1:6)]
measures.imputed <- rfImpute(measures)
measures.imputed <- rfImpute(measures, data = measures)
measures.imputed <- rfImpute(scores ~ ., data = measures)
install.packages("mlogit")
library(mlogit)
ml.fit <- mlogit(scores, data = train)
ml.fit <- mlogit(scores ~ ., data = train)
?mlogit
ml.fit <- mlogit(scores ~ ., data = train, shape = "wide", choice = 0)
names <- names(train)
n <- names(train)
f <- as.formula(paste("scores ~ ", paste(n[!n %in% "scores"], collapse = " + ")))
ml.fit <- mlogit(f, data = train, shape = "wide", choice = 0)
measures <- read.csv("../data/processed/complete_measures.csv", stringsAsFactors = FALSE)
scores.map <- c("A"=1, "D"=2, "H"=3)
measures$scores <- scores.map[measures$scores]
measures <- measures[, -c(1:6)]
smp_size <- floor(0.75 * nrow(measures))
set.seed(123)
train_ind <- sample(seq_len(nrow(measures)), size = smp_size)
train <- measures[train_ind, ]
test <- measures[-train_ind, ]
rf.fit <- randomForest(scores ~ ., data = train)
measures <- read.csv("../data/processed/complete_measures.csv", stringsAsFactors = FALSE)
scores.map <- c("A"=0, "D"=1, "H"=2)
measures$scores <- scores.map[measures$scores]
measures <- measures[, -c(1:6)]
smp_size <- floor(0.75 * nrow(measures))
set.seed(123)
train_ind <- sample(seq_len(nrow(measures)), size = smp_size)
train <- measures[train_ind, ]
test <- measures[-train_ind, ]
n <- names(train)
f <- as.formula(paste("scores ~ ", paste(n[!n %in% "scores"], collapse = " + ")))
ml.fit <- mlogit(f, data = train, shape = "wide", choice = 0)
table(names)
duplicated(train)
sum(duplicated(train))
train[duplicated(train)]
train[duplicated(train),]
?duplicated
d <- duplicated(train)
train.dd <- train[-d, ]
ml.fit <- mlogit(f, data = train.dd, shape = "wide", choice = 0)
set.seed(101)
train_ind <- sample(seq_len(nrow(measures)), size = smp_size)
train <- measures[train_ind, ]
test <- measures[-train_ind, ]
n <- names(train)
f <- as.formula(paste("scores ~ ", paste(n[!n %in% "scores"], collapse = " + ")))
ml.fit <- mlogit(f, data = train.dd, shape = "wide", choice = 0)
